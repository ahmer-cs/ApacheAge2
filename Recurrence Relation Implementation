Method 1
#include <stdio.h>

int recurrence(int n) {
    if (n == 0)
        return 0;
    else if (n == 1)
        return 1;
    else if (n == 2)
        return 2;
    else
        return recurrence(n - 3) + recurrence(n - 2);
}

int main() {
    int n = 10;
    int result = recurrence(n);
    printf("F(%d) = %d\n", n, result);
    return 0;
}

##########################################################

Method 2
#include <stdio.h>

int recurrence(int n) {
    int fib[n + 1];
    fib[0] = 0;
    fib[1] = 1;
    fib[2] = 2;

    for (int i = 3; i <= n; i++) {
        fib[i] = fib[i - 3] + fib[i - 2];
    }

    return fib[n];
}

int main() {
    int n = 10;
    int result = recurrence(n);
    printf("F(%d) = %d\n", n, result);
    return 0;
}

#################################################################
Method 3
#include <stdio.h>

int recurrence(int n) {
    int a = 0;
    int b = 1;
    int c = 2;

    if (n == 0)
        return a;
    else if (n == 1)
        return b;
    else if (n == 2)
        return c;

    int result;
    for (int i = 3; i <= n; i++) {
        result = a + b;
        a = b;
        b = c;
        c = result;
    }

    return result;
}

int main() {
    int n = 10;
    int result = recurrence(n);
    printf("F(%d) = %d\n", n, result);
    return 0;
}
